From cb483310b053348de6011044f13449741233356a Mon Sep 17 00:00:00 2001
From: Ivan Mironov <mironov.ivan@gmail.com>
Date: Tue, 12 Feb 2019 15:43:42 +0500
Subject: [PATCH 4/5] usb: core: Add support of disabling SS link instead of U3

Some Apple MacBooks contain internal SD card reader connected to the USB
3.0 bus. Example: MacBook Pro Retina mid 2015, which contains USB card
reader with ID 05ac:8406. Currently, such card reader works only after a
reboot and completely disappears from system after the first system
suspend/resume cycle. Also, any subsequent attempts to suspend are
starting to fail.

It seems that device somehow breaks after chenging its link state to U3.
The easiest way to reproduce this is to trigger runtime suspend:

	rmmod uas usb-storage  # these are preventing runtime suspend
	echo auto >/sys/bus/usb/devices/2-4/power/control
	# wait few seconds here
	cat /sys/bus/usb/devices/2-4/power/runtime_suspended_time
	# value of runtime_suspended_time should be !=0 and increasing
	echo on >/sys/bus/usb/devices/2-4/power/control
	# card reader disappears here

When trying to fix both suspend and card reader device, I found that the
only working method is to set link state to disabled during suspend
procedure.

This patch adds new quirk for USB devices: USB_QUIRK_NO_SS_LS_U3. When
enabled, it changes the usual suspend procedure for USB 3.0 devices by
setting link state to DISABLED instead of U3. To "resume" from disabled
state, new code sets link state to RX_DETECT.

As usual, this quirk may be enabled manually by adding
'usbcore.quirks=$VID:$PID:p' to the kernel parameters.

Link: https://bugzilla.kernel.org/show_bug.cgi?id=111201
Link: https://bugzilla.kernel.org/show_bug.cgi?id=202509
Signed-off-by: Ivan Mironov <mironov.ivan@gmail.com>
---
 drivers/usb/core/hub.c     | 148 ++++++++++++++++++++++++++++++++++---
 drivers/usb/core/quirks.c  |   3 +
 include/linux/usb.h        |   2 +
 include/linux/usb/quirks.h |  15 ++++
 4 files changed, 157 insertions(+), 11 deletions(-)

diff --git a/drivers/usb/core/hub.c b/drivers/usb/core/hub.c
index 20ce2545029a..b03b8e8b858c 100644
--- a/drivers/usb/core/hub.c
+++ b/drivers/usb/core/hub.c
@@ -3169,6 +3169,51 @@ static int wait_for_status(int status, struct usb_device *udev,
 	return status;
 }
 
+static bool is_port_ls_ss_disabled(u16 portchange, u16 portstatus)
+{
+	return (portchange & USB_PORT_STAT_C_CONNECTION) &&
+			((portstatus & USB_PORT_STAT_LINK_STATE) ==
+			USB_SS_PORT_LS_SS_DISABLED);
+}
+
+static int wait_for_ls_ss_disabled(int status, struct usb_device *udev,
+		struct usb_hub *hub, int port1)
+{
+	int delay_ms;
+	u16 portchange, portstatus;
+
+	if (status == 0)
+		status = hub_port_status(hub, port1, &portstatus, &portchange);
+
+	status = wait_for_status(status, udev,
+			hub, port1,
+			&portchange, &portstatus,
+			2000, 20, &delay_ms,
+			is_port_ls_ss_disabled);
+	dev_dbg(&udev->dev, "Waited %dms for LS_SS_DISABLED, status == %d\n",
+			delay_ms, status);
+	return status;
+}
+
+static int usb3_disable_link(struct usb_device *udev, struct usb_hub *hub)
+{
+	int port1 = udev->portnum;
+	struct usb_port *port_dev = hub->ports[port1 - 1];
+	int status;
+
+	dev_dbg(&port_dev->dev, "disabling link...\n");
+	status = hub_set_port_link_state(hub, port1,
+			USB_SS_PORT_LS_SS_DISABLED);
+	if (status)
+		dev_dbg(&port_dev->dev, "can't disable link\n");
+	status = wait_for_ls_ss_disabled(status, udev, hub, port1);
+
+	usb_clear_port_feature(hub->hdev, port1,
+			USB_PORT_FEAT_C_CONNECTION);
+
+	return status;
+}
+
 /*
  * usb_port_suspend - suspend a usb device's upstream port
  * @udev: device that's no longer in active use, not a root hub
@@ -3255,10 +3300,20 @@ int usb_port_suspend(struct usb_device *udev, pm_message_t msg)
 			goto err_ltm;
 	}
 
-	/* see 7.1.7.6 */
-	if (hub_is_superspeed(hub->hdev))
-		status = hub_set_port_link_state(hub, port1, USB_SS_PORT_LS_U3);
-
+	if (hub_is_superspeed(hub->hdev)) {
+		if (udev->quirks & USB_QUIRK_NO_SS_LS_U3) {
+			dev_warn_once(&port_dev->dev,
+					"suspend: disabling link instead of U3, host will not detect plug/unplug events on this port\n");
+			if (udev->do_remote_wakeup)
+				dev_warn_once(&port_dev->dev,
+						"suspend: remote wakeup will not work because of disabled link\n");
+			status = usb3_disable_link(udev, hub);
+		} else {
+			/* see 7.1.7.6 */
+			status = hub_set_port_link_state(
+					hub, port1, USB_SS_PORT_LS_U3);
+		}
+	}
 	/*
 	 * For system suspend, we do not need to enable the suspend feature
 	 * on individual USB-2 ports.  The devices will automatically go
@@ -3277,6 +3332,7 @@ int usb_port_suspend(struct usb_device *udev, pm_message_t msg)
 		really_suspend = false;
 		status = 0;
 	}
+
 	if (status) {
 		dev_dbg(&port_dev->dev, "can't suspend, status %d\n", status);
 
@@ -3411,6 +3467,33 @@ static int finish_port_resume(struct usb_device *udev)
 	return status;
 }
 
+static bool is_port_ls_not_ss_disabled(u16 portchange, u16 portstatus)
+{
+	return (portstatus & USB_PORT_STAT_LINK_STATE) !=
+			USB_SS_PORT_LS_SS_DISABLED;
+}
+
+static int wait_for_ls_not_ss_disabled(int status,
+		struct usb_device *udev,
+		struct usb_hub *hub, int port1,
+		u16 *portchange, u16 *portstatus)
+{
+	int delay_ms;
+
+	if (status == 0)
+		status = hub_port_status(hub, port1, portstatus, portchange);
+
+	status = wait_for_status(status, udev,
+			hub, port1,
+			portchange, portstatus,
+			2000, 20, &delay_ms,
+			is_port_ls_not_ss_disabled);
+	dev_dbg(&udev->dev,
+			"Waited %dms for !LS_SS_DISABLED, status == %d\n",
+			delay_ms, status);
+	return status;
+}
+
 static bool is_port_connected(u16 portchange, u16 portstatus)
 {
 	return portstatus & USB_PORT_STAT_CONNECTION;
@@ -3508,8 +3591,35 @@ int usb_port_resume(struct usb_device *udev, pm_message_t msg)
 
 	usb_lock_port(port_dev);
 
-	/* Skip the initial Clear-Suspend step for a remote wakeup */
 	status = hub_port_status(hub, port1, &portstatus, &portchange);
+	if (status)
+		dev_dbg(&port_dev->dev,
+				"can't get initial portstatus, status %d\n",
+				status);
+
+	if (status == 0 && hub_is_superspeed(hub->hdev)) {
+		if ((portstatus & USB_PORT_STAT_LINK_STATE) ==
+				USB_SS_PORT_LS_SS_DISABLED) {
+			if (!(udev->quirks & USB_QUIRK_NO_SS_LS_U3))
+				dev_warn(&port_dev->dev,
+						"unexpected: link was disabled\n");
+
+			dev_dbg(&port_dev->dev, "enabling link...\n");
+			status = hub_set_port_link_state(hub, port1,
+					USB_SS_PORT_LS_RX_DETECT);
+			if (status)
+				dev_dbg(&port_dev->dev, "can't enable link\n");
+
+			status = wait_for_ls_not_ss_disabled(
+					status, udev, hub, port1,
+					&portchange, &portstatus);
+		} else if (udev->quirks & USB_QUIRK_NO_SS_LS_U3) {
+			dev_warn(&port_dev->dev,
+					"unexpected: link was not disabled\n");
+		}
+	}
+
+	/* Skip the initial Clear-Suspend step for a remote wakeup */
 	if (status == 0 && !port_is_suspended(hub, portstatus)) {
 		if (portchange & USB_PORT_STAT_C_SUSPEND)
 			pm_wakeup_event(&udev->dev, 0);
@@ -4232,12 +4342,12 @@ EXPORT_SYMBOL_GPL(usb_unlocked_enable_lpm);
 
 /* usb3 devices use U3 for disabled, make sure remote wakeup is disabled */
 static void hub_usb3_port_prepare_disable(struct usb_hub *hub,
-					  struct usb_port *port_dev)
+					  struct usb_port *port_dev,
+					  struct usb_device *udev)
 {
-	struct usb_device *udev = port_dev->child;
 	int ret;
 
-	if (udev && udev->port_is_suspended && udev->do_remote_wakeup) {
+	if (udev->port_is_suspended && udev->do_remote_wakeup) {
 		ret = hub_set_port_link_state(hub, port_dev->portnum,
 					      USB_SS_PORT_LS_U0);
 		if (!ret) {
@@ -4308,9 +4418,25 @@ static int hub_port_disable(struct usb_hub *hub, int port1, int set_state)
 
 	if (!hub->error) {
 		if (hub_is_superspeed(hub->hdev)) {
-			hub_usb3_port_prepare_disable(hub, port_dev);
-			ret = hub_set_port_link_state(hub, port_dev->portnum,
-						      USB_SS_PORT_LS_U3);
+			struct usb_device *udev = port_dev->child;
+			bool u3_supported = true;
+
+			if (udev) {
+				hub_usb3_port_prepare_disable(
+						hub, port_dev, udev);
+
+				if (udev->quirks & USB_QUIRK_NO_SS_LS_U3) {
+					u3_supported = false;
+					dev_warn_once(&port_dev->dev,
+							"port disable: disabling link instead of U3, host will not detect plug/unplug events on this port\n");
+					ret = usb3_disable_link(udev, hub);
+				}
+			}
+
+			if (u3_supported)
+				ret = hub_set_port_link_state(
+						hub, port_dev->portnum,
+						USB_SS_PORT_LS_U3);
 		} else {
 			ret = usb_clear_port_feature(hdev, port1,
 					USB_PORT_FEAT_ENABLE);
diff --git a/drivers/usb/core/quirks.c b/drivers/usb/core/quirks.c
index 8bc35d53408b..6c638220bc30 100644
--- a/drivers/usb/core/quirks.c
+++ b/drivers/usb/core/quirks.c
@@ -131,6 +131,9 @@ static int quirks_param_set(const char *val, const struct kernel_param *kp)
 			case 'o':
 				flags |= USB_QUIRK_HUB_SLOW_RESET;
 				break;
+			case 'p':
+				flags |= USB_QUIRK_NO_SS_LS_U3;
+				break;
 			/* Ignore unrecognized flag characters */
 			}
 		}
diff --git a/include/linux/usb.h b/include/linux/usb.h
index 5e49e82c4368..4ee65b114150 100644
--- a/include/linux/usb.h
+++ b/include/linux/usb.h
@@ -610,6 +610,8 @@ struct usb3_lpm_parameters {
  * @do_remote_wakeup:  remote wakeup should be enabled
  * @reset_resume: needs reset instead of resume
  * @port_is_suspended: the upstream port is suspended (L2 or U3)
+ * @disable_link_on_suspend: link was disabled/should be disabled during
+ *	suspend
  * @wusb_dev: if this is a Wireless USB device, link to the WUSB
  *	specific data for the device.
  * @slot_id: Slot ID assigned by xHCI
diff --git a/include/linux/usb/quirks.h b/include/linux/usb/quirks.h
index a1be64c9940f..d88bda2c99ba 100644
--- a/include/linux/usb/quirks.h
+++ b/include/linux/usb/quirks.h
@@ -69,4 +69,19 @@
 /* Hub needs extra delay after resetting its port. */
 #define USB_QUIRK_HUB_SLOW_RESET		BIT(14)
 
+/*
+ * USB 3.0 (SuperSpeed) device does not support the U3 link state.
+ *
+ * On suspend or port disable: disable link on device's port instead of
+ * changing link state to U3. On resume: enable link again.
+ *
+ * Has effect only on USB 3.0 devices connected to USB 3.0 ports.
+ *
+ * Remote wakeup is not supported for device with this quirk enabled.
+ *
+ * After disabling port with this quirk using hub_port_disable(), host
+ * controller will not signal the host when device is plugged or unplugged.
+ */
+#define USB_QUIRK_NO_SS_LS_U3			BIT(15)
+
 #endif /* __LINUX_USB_QUIRKS_H */
-- 
2.20.1

